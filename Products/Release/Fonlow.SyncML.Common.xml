<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Fonlow.SyncML.Common</name>
    </assembly>
    <members>
        <member name="T:Fonlow.SyncML.Common.MessagesInPairs">
            <summary>
            Access messages persisted as Code=Message.
            </summary>
        </member>
        <member name="M:Fonlow.SyncML.Common.MessagesInPairs.GetMessage(System.String)">
            <summary>
            Return message according to code.
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="M:Fonlow.SyncML.Common.MessagesInPairs.LoadMessages(System.String)">
            <summary>
            Load message from a string with code:message pairs.
            </summary>
            <param name="textOfStatusMessagePairs">Text in format code:message</param>
            <returns></returns>
        </member>
        <member name="F:Fonlow.SyncML.Common.MessagesInPairs.statusCodeMessages">
            <summary>
            Buffer to store messages. NameValueCollection use hash index, good enough.
            </summary>
        </member>
        <member name="T:Fonlow.SyncML.Common.EventsHelper">
            <summary>
            Helper for safely firing events
            </summary>
        </member>
        <member name="M:Fonlow.SyncML.Common.EventsHelper.Fire``1(System.EventHandler{``0},System.Object,``0)">
            <summary>
            Fire subscribed functions safely even if some of them fail.
            </summary>
            <typeparam name="T">.NET2.0's event model requires generic.</typeparam>
            <param name="eventProperty">The publisher's event</param>
            <param name="sender"></param>
            <param name="eventArgs">Publish's even arguments to pass on.</param>
        </member>
        <member name="T:Fonlow.SyncML.Common.StatusEventArgs">
            <summary>
            This is for return a text message in an event
            </summary>
        </member>
        <member name="T:Fonlow.SyncML.Common.IncrementProgressBarEventArgs">
            <summary>
            Contain the amount of increment that the progress bar should proceed.
            </summary>
        </member>
        <member name="T:Fonlow.SyncML.Common.InitProgressBarEventArgs">
            <summary>
            Contain init info of progress bar.
            </summary>
        </member>
        <member name="T:Fonlow.SyncML.Common.CompareTextsEventArgs">
            <summary>
            This is to provide client codes with two texts for comparison in order to do unit tests.
            </summary>
        </member>
        <member name="T:Fonlow.SyncML.Common.LocationSizeChangedEventArgs">
            <summary>
            Report new location and size in an event
            </summary>
        </member>
        <member name="T:Fonlow.SyncML.Common.AnchorChangedEventArgs">
            <summary>
            Return a anchor including the anchor number and the time in an event. 
            </summary>
        </member>
        <member name="T:Fonlow.SyncML.Common.SyncSettingsBase">
            <summary>
            Server settints of sync. A derived class should have sync items defined.
            </summary>
        </member>
        <member name="M:Fonlow.SyncML.Common.SyncSettingsBase.GetSyncItems">
            <summary>
            Put all properties of SyncItemType into a list for the sack of query. Items are sorted according OrderNo
            </summary>
            <returns>A list of items. If no one, the list is empty but not null.</returns>
        </member>
        <member name="P:Fonlow.SyncML.Common.ProgramSettings.Copyright">
            <summary>
            In theory these properties should be in ApplicationScoped, however, because the settings
            may be used in addin hosted by an Win32 program like Outlook, it is not convenient to
            install or change ApplicationScoped settings in such scenario. So, a workaround is to
            make all settings in UserScoped.
            </summary>
        </member>
        <member name="P:Fonlow.SyncML.Common.ProgramSettings.Version">
            <summary>
            If not set, the About box of the UI will use version numbers of respective assemblies.
            </summary>
        </member>
        <member name="M:Fonlow.SyncML.Common.SyncItem.GetFilter">
            <summary>
            Some sync item type might have some sort of filter defined.
            It is up the the client codes to interpret what the object is.
            </summary>
            <returns>Null by default meaning there's no filter.</returns>
        </member>
        <member name="P:Fonlow.SyncML.Common.SyncItem.ItemType">
            <summary>
            An internal identifier to tell client codes what type of data to sync.
            It may be Contacts, Calendar, Note etc., up to the application to interpret.
            </summary>
        </member>
        <member name="P:Fonlow.SyncML.Common.SyncItem.LocalDataSourceAssembly">
            <summary>
            Define the qualified name of the assembly with ILocalDataSource implementation.
            </summary>
        </member>
        <member name="P:Fonlow.SyncML.Common.SyncItem.DataFormat">
            <summary>
            For the same itemType, there might be more than one data format to represent in meta data.
            A derived class may override this property in order to provider a StandardValuesConverter which
            makes this property to be represented in datagrid as a dropdown list.
            </summary>
        </member>
        <member name="P:Fonlow.SyncML.Common.SyncItem.OrderNo">
            <summary>
            Client codes may use this to sort items for visual presentation.
            </summary>
        </member>
        <member name="T:Fonlow.SyncML.Common.StandardValuesConverter">
            <summary>
            When decorating a property of a string type with a derived class of this class,
            in DataGrid, the property will have a dropdown list with standard values.
            A derived class should have a constructor without parameters, and initialize
            values through the constructor of the base.
            </summary>
        </member>
        <member name="M:Fonlow.SyncML.Common.StandardValuesConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Make sure in propertyGrid only items in the drop list can be used.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Fonlow.SyncML.Common.SyncConstants">
            <summary>
            Contain common constants
            </summary>
        </member>
        <member name="F:Fonlow.SyncML.Common.SyncConstants.ProdId">
            <summary>
            Used in iCalendar
            </summary>
        </member>
        <member name="T:Fonlow.SyncML.Common.SyncType">
            <summary>
            Sync type.
            </summary>
        </member>
        <member name="T:Fonlow.SyncML.Common.EnumDescriptionConverter">
            <summary>
            Decorate an enum type to give string representation in datagrid, with
            descriptions on each member of the enum.
            </summary>
        </member>
        <member name="M:Fonlow.SyncML.Common.EnumDescriptionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Convert to string
            </summary>
        </member>
        <member name="M:Fonlow.SyncML.Common.EnumDescriptionConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Convert from string
            </summary>
        </member>
        <member name="T:Fonlow.SyncML.Common.FacadeErrorException">
            <summary>
            Give SyncMLFacade a common use of exception.
            </summary>
            
        </member>
        <member name="T:Fonlow.SyncML.Common.Utility">
            <summary>
            Common little functions used in SyncML projects
            </summary>
        </member>
        <member name="M:Fonlow.SyncML.Common.Utility.ConvertUtf8TextToBase64(System.String)">
            <summary>
            Convert utf8 text to Base64 
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Fonlow.SyncML.Common.Utility.ConvertFromBase64(System.String)">
            <summary>
            Get text from base64 encoded text.
            </summary>
            <param name="base64Text"></param>
            <returns>Utf8 text</returns>
        </member>
        <member name="M:Fonlow.SyncML.Common.Utility.GenerateSyncMLMD5(System.String,System.String,System.Byte[])">
            <summary>
            Generate MD5 digest for SyncML authentication
            </summary>
            <param name="user">User name of SyncML server</param>
            <param name="password"></param>
            <param name="nonce"></param>
            <returns>MD5 digest</returns>
        </member>
        <member name="T:Fonlow.SyncML.Common.SyncServerConnection">
            <summary>
            Send web request through POST
            </summary>
        </member>
        <member name="M:Fonlow.SyncML.Common.SyncServerConnection.GetResponseText(System.String)">
            <summary>
            Post data and get reponse text.
            </summary>
            <param name="data">Data to post.</param>
            <returns>Text to receive from sponse.</returns>
        </member>
        <member name="T:Fonlow.SyncML.Common.XmlHelpers">
            <summary>
            Provide common helper Xml functions
            </summary>
        </member>
        <member name="M:Fonlow.SyncML.Common.XmlHelpers.SafeElementsQuery(System.Xml.Linq.XElement,System.String[])">
            <summary>
            Safely query multiple levels of Xml path. If the path could not return any element,
            return an empty list rather than null. This is convenient for Linq to Xml.
            </summary>
            <param name="topElement"></param>
            <param name="elementNames"></param>
            <returns>Elements or empty list.</returns>
        </member>
    </members>
</doc>

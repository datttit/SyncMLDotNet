<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Fonlow.SyncML.SyncMLFacade</name>
    </assembly>
    <members>
        <member name="T:Fonlow.SyncML.CleaningUpStep">
            <summary>
             After applying changes to local, generate SyncML message from the commands pool.
            The Map command might be already stored in Facade.ResponseCommandPool,
            if the changes including adding contacts.
            </summary>
        </member>
        <member name="T:Fonlow.SyncML.SyncMLSyncMessageBase">
            <summary>
            With common handlings of response from the server.
            And the algorithm has recursive uses of derived classes
            </summary>
        </member>
        <member name="T:Fonlow.SyncML.SyncMLMessageBase">
            <summary>
            Interface of each sync message in order to encalsulate a SyncML message. 
            The derived classes are to implement SyncML messages
            for steps of a synchronization session.
            </summary>
        </member>
        <member name="M:Fonlow.SyncML.SyncMLMessageBase.#ctor(Fonlow.SyncML.SyncMLFacade)">
            <summary>
            Made sure the Step can use resource in SyncMLFacade
            </summary>
            <param name="syncMLFacade"></param>
        </member>
        <member name="M:Fonlow.SyncML.SyncMLMessageBase.Send">
            <summary>
            Send request to server. All derived functions should call Facade.CurrentMsgID++ at the end.
            </summary>
        </member>
        <member name="M:Fonlow.SyncML.SyncMLMessageBase.ProcessResponse(System.String)">
            <summary>
            Process response from server to establish SyncML models as a SyncMLSyncML object.
            The inherited function should call the base first, then analyze the model.
            If the response has fatal error, it is signaled through serverSyncML== null.
            </summary>
            <param name="text">True if success. If fail, ServerSyncML is null. </param>
        </member>
        <member name="M:Fonlow.SyncML.SyncMLMessageBase.CreateCommonSyncMLWithCredential">
            <summary>
            The Cred element MUST be included if the authentication is needed.
            </summary>
            <returns>Basic XML used by other processes, with basic Cred.</returns>
        </member>
        <member name="M:Fonlow.SyncML.SyncMLMessageBase.CreateMD5Digest(System.Byte[])">
            <summary>
            Let H = the MD5 Hashing function.
            Let Digest = the output of the MD5 Hashing function.
            Let B64 = the base64 encoding function.
            Digest = H(B64(H(username':'password))':'nonce)
            </summary>
            <param name="nonce">Nonce from the challenger.</param>
            <returns>The digest.</returns>
        </member>
        <member name="P:Fonlow.SyncML.SyncMLMessageBase.Facade">
            <summary>
            Access common resources of SyncML facade as a container of syncML message objects.
            </summary>
        </member>
        <member name="P:Fonlow.SyncML.SyncMLMessageBase.CommandAndStatusRegister">
            <summary>
            Record how many commands sent to the server and how many responses received from the server.
            The object is generally created at the begining of Send().
            This may not be used in every step.
            </summary>
        </member>
        <member name="P:Fonlow.SyncML.SyncMLMessageBase.ServerSyncML">
            <summary>
            Hold SyncML model of the message from the server in ProcessResponse.
            </summary>
        </member>
        <member name="P:Fonlow.SyncML.SyncMLMessageBase.ClientSyncML">
             <summary>
             Client SyncML to be constructed
            •  The value of the VerDTD element MUST be '1.2'.
            • The VerProto element MUST be included to specify the sync protocol and the version of
            the protocol. The value MUST be 'SyncML/1.2' when complying with this specification.
            • Session ID MUST be included to indicate the ID of a sync session.
            • MsgID MUST be used to unambiguously identify the message belonging a sync session
            and traveling from the client to the server.
            • The Target element MUST be used to identify the target device and service.
            • The Source element MUST be used to identify the source device.
             </summary>
        </member>
        <member name="P:Fonlow.SyncML.SyncMLMessageBase.UserPasswordBase64Encoded">
            <summary>
            Base64 encoded user password
            </summary>
        </member>
        <member name="M:Fonlow.SyncML.SyncMLSyncMessageBase.MoveCommandsInPoolToMessage(Fonlow.SyncML.Elements.SyncMLSyncML)">
             <summary>
             Move pending commands in pool into a new message.
             And each command will be assigned with an CmdID.
             When analyzing the response from server, new commands may be generated
             for next message to server.
             
             This function is better to be put at the end of construction of SyncML message.
             </summary>
             <param name="syncML">New message to be amended before sending to the server.</param>
            <returns>Ture if commmands are added from pool; false if no command added.</returns>
        </member>
        <member name="M:Fonlow.SyncML.SyncMLSyncMessageBase.UpdateCurrentURI(Fonlow.SyncML.Elements.SyncMLSyncML)">
            <summary>
            So URI of Post will likely be using session id returned by the server.
            </summary>
            <param name="syncMLFromServer">SyncML message from the server.</param>
        </member>
        <member name="M:Fonlow.SyncML.SyncMLSyncMessageBase.CleanUp">
            <summary>
            The derived class might need to call CleanUp in ProcessResponse.
            </summary>
        </member>
        <member name="M:Fonlow.SyncML.SyncMLSyncMessageBase.ApplySyncCommandToLocal(Fonlow.SyncML.Elements.SyncMLSync)">
            <summary>
            Process a sync command from server. This will update the local address book, and prepare map commands to be sent back to the server
            </summary>
            <param name="syncCommand"></param>
        </member>
        <member name="M:Fonlow.SyncML.SyncMLSyncMessageBase.GenerateStatusCommandsForSyncCommand(Fonlow.SyncML.Elements.SyncMLSync)">
            <summary>
            Generate status commands for received Sync command, and put the commands into the pool.
            </summary>
            <param name="syncCommand">Sync command from the server.</param>
        </member>
        <member name="M:Fonlow.SyncML.SyncMLSyncMessageBase.HandleServerStatus(Fonlow.SyncML.Elements.SyncMLStatus)">
            <summary>
            Called by ProcessResponseForXXX in order to respond to some Status returned by server
            </summary>
            <param name="status">SyncMLStatus object which is part of syncml.</param>
        </member>
        <member name="M:Fonlow.SyncML.SyncMLSyncMessageBase.PrepareStatusForReturnedAlert(Fonlow.SyncML.Elements.SyncMLAlert)">
            <summary>
            Called by ProcessResponseForXXX in order to create status for Alert returned by server.
            </summary>
            <param name="alert"></param>
        </member>
        <member name="M:Fonlow.SyncML.SyncMLSyncMessageBase.ProcessServerAlertCommands(System.Collections.Generic.IList{Fonlow.SyncML.Elements.SyncMLAlert})">
            <summary>
            Handle alert commands from the server.
            </summary>
            <param name="alertCommands"></param>
        </member>
        <member name="M:Fonlow.SyncML.SyncMLSyncMessageBase.SendSyncContent(System.Boolean)">
            <summary>
            Send sync content in one or more messages.
            This function will spin out two thread, one for preparing commands source,
            and the other to keey server busy to avoid timeout, as the localDataSource
            might need long time to prepare data.
            </summary>
            <param name="slowSync">True to do slow sync.</param>
        </member>
        <member name="M:Fonlow.SyncML.SyncMLSyncMessageBase.GenerateMapCommand(System.Collections.Specialized.NameValueCollection,Fonlow.SyncML.Elements.SyncMLSync)">
            <summary>
            Generate map command through LocalID/ServerID paris.
            </summary>
            <param name="localIDServerIDPairs">The pairs is returned by local address book.</param>
            <param name="previousServerSyncCommand">The map command need to obtain some data from previous sync command.</param>
            <returns>The map command to be integrated into next SyncML message sent back to the server. CmdID is not assigned yet.</returns>
        </member>
        <member name="M:Fonlow.SyncML.CleaningUpStep.Send">
            <summary>
            Send pending commands to the server. If no pending commands, do nothing.
            </summary>
        </member>
        <member name="M:Fonlow.SyncML.CleaningUpStep.CreateMessageFromCommandsPool">
            <summary>
            Create SyncML if there's any command pending to sent from the pool.
            </summary>
            <returns>Null if no more command to send.</returns>
        </member>
        <member name="T:Fonlow.SyncML.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Fonlow.SyncML.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Fonlow.SyncML.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Fonlow.SyncML.Properties.Resources.DataStoreSIFC">
             <summary>
               Looks up a localized string similar to &lt;DataStore&gt;&lt;SourceRef&gt;scard&lt;/SourceRef&gt;&lt;DisplayName&gt;Sif-C Source&lt;/DisplayName&gt;&lt;Rx-Pref&gt;&lt;CTType&gt;text/x-s4j-sifc&lt;/CTType&gt;&lt;VerCT&gt;&lt;/VerCT&gt;&lt;/Rx-Pref&gt;&lt;Rx&gt;
            &lt;CTType&gt;text/x-s4j-sifc&lt;/CTType&gt;&lt;VerCT&gt;&lt;/VerCT&gt;&lt;/Rx&gt;&lt;Tx-Pref&gt;&lt;CTType&gt;text/x-s4j-sifc&lt;/CTType&gt;&lt;VerCT&gt;&lt;/VerCT&gt;
            &lt;/Tx-Pref&gt;&lt;Tx&gt;&lt;CTType&gt;text/x-s4j-sifc&lt;/CTType&gt;&lt;VerCT&gt;&lt;/VerCT&gt;&lt;/Tx&gt;&lt;SyncCap&gt;&lt;SyncType&gt;1&lt;/SyncType&gt;&lt;SyncType&gt;2&lt;/SyncType&gt;
            &lt;SyncType&gt;3&lt;/SyncType&gt;&lt;SyncType&gt;4&lt;/SyncType&gt;&lt;SyncType&gt;5&lt;/SyncType&gt;&lt;SyncType&gt;6&lt;/SyncType&gt;&lt;/SyncCap&gt;&lt;/DataStore&gt;.
             </summary>
        </member>
        <member name="P:Fonlow.SyncML.Properties.Resources.DataStoreVCard21">
             <summary>
               Looks up a localized string similar to &lt;DataStore&gt;
            &lt;SourceRef&gt;card&lt;/SourceRef&gt;
            &lt;DisplayName&gt;vCardSource&lt;/DisplayName&gt;
            &lt;Rx-Pref&gt;
            &lt;CTType&gt;text/x-vcard&lt;/CTType&gt;
            &lt;VerCT&gt;2.1&lt;/VerCT&gt;
            &lt;/Rx-Pref&gt;
            &lt;Rx&gt;
            &lt;CTType&gt;text/x-vcard&lt;/CTType&gt;
            &lt;VerCT&gt;2.1&lt;/VerCT&gt;
            &lt;/Rx&gt;
            &lt;Tx-Pref&gt;
            &lt;CTType&gt;text/x-vcard&lt;/CTType&gt;
            &lt;VerCT&gt;2.1&lt;/VerCT&gt;
            &lt;/Tx-Pref&gt;
            &lt;Tx&gt;
            &lt;CTType&gt;text/x-vcard&lt;/CTType&gt;
            &lt;VerCT&gt;2.1&lt;/VerCT&gt;
            &lt;/Tx&gt;
            &lt;CTCap&gt;
            &lt;CTType&gt;text/x-vcard&lt;/CTType&gt;
            &lt;VerCT&gt;2.1&lt;/VerCT&gt;
            &lt;Property&gt;
            &lt;PropName&gt;BEGIN&lt;/PropName&gt;
            &lt;ValEnum&gt;VCARD&lt;/ValEnum&gt;
            &lt;/Property&gt;
            &lt;Property&gt;
            &lt;Pr [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:Fonlow.SyncML.Properties.Resources.StatusMessages">
             <summary>
               Looks up a localized string similar to 200=OK. The SyncML command completed successfully.
            201=Item added. The requested item was added.
            202=Accepted for processing. The request to either run a remote execution of an application or to alert a user or application was successfully performed.
            203=Non-authoritative response. The request is being responded to by an entity other than the one targeted. The response is only to be returned when the request would have been resulted in a 200 response code from the authoritative target.
            204=No content. T [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="T:Fonlow.SyncML.SyncMLAuthenticationType">
            <summary>
            Authentication types
            </summary>
        </member>
        <member name="T:Fonlow.SyncML.SyncMLAuthenticationStatus">
            <summary>
            Indicate what status of authentication message
            </summary>
        </member>
        <member name="T:Fonlow.SyncML.DeviceInfoEventArgs">
            <summary>
            To deliver info of a device in a SyncML transaction.
            </summary>
        </member>
        <member name="T:Fonlow.SyncML.SyncMLConnection">
            <summary>
            Connection to SyncML server.
            </summary>
        </member>
        <member name="T:Fonlow.SyncML.SyncMLConnections">
            <summary>
            Provide a pool of connections different URI sharing the same URL but different sessions.
            The first URI generally has no session ID, and the following ones have with session ID returned from
            the response.
            </summary>
        </member>
        <member name="M:Fonlow.SyncML.SyncMLConnections.ResetUri">
            <summary>
            Make URI has the original uri defined in the constructor.
            </summary>
        </member>
        <member name="M:Fonlow.SyncML.SyncMLConnections.GetResponseText(System.String)">
            <summary>
            Post message to server and get response.
            </summary>
            <param name="data">Message to send.</param>
            <returns>Response from the server. Null if connection failed.</returns>
        </member>
        <member name="P:Fonlow.SyncML.SyncMLConnections.Uri">
            <summary>
            The value may be changed with different 
            </summary>
        </member>
        <member name="T:Fonlow.SyncML.SyncMLFacade">
            <summary>
            Interfaces for frequent used sync commands by end users. Aggregrated functions to
            complete a sync task.
            The Facade should be used only once for each sync session because of the initialization of flags.
            </summary>
        </member>
        <member name="M:Fonlow.SyncML.SyncMLFacade.#ctor(Fonlow.SyncML.Common.ILocalDataSource)">
            <summary>
            Major constructor. Connect to external platform provider.
            </summary>
        </member>
        <member name="M:Fonlow.SyncML.SyncMLFacade.HandleErrorStatus(System.String)">
            <summary>
            Trace with custom error message, under category Error.
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:Fonlow.SyncML.SyncMLFacade.WriteErrorException(System.Exception)">
            <summary>
            Trace Error message of exception, under category Exception
            </summary>
            <param name="exception"></param>
        </member>
        <member name="M:Fonlow.SyncML.SyncMLFacade.GeneralCompletionCallback(System.IAsyncResult)">
            <summary>
            Provide general handling of async call back
            </summary>
            <param name="asyncResult"></param>
        </member>
        <member name="F:Fonlow.SyncML.SyncMLFacade.currentSessionID">
            <summary>
            This ID is initialized when the first time connecting to the sync server.
            </summary>
        </member>
        <member name="M:Fonlow.SyncML.SyncMLFacade.LogOn">
            <summary>
            Logon to syncml server.
            </summary>
        </member>
        <member name="F:Fonlow.SyncML.SyncMLFacade.responseCommandPool">
            <summary>
            SyncML command pool shared by all sync steps, to store commands for next request.
            A sync step should pick up commands in the beginning when forming a syncml message, then clear.
            </summary>
        </member>
        <member name="M:Fonlow.SyncML.SyncMLFacade.Sync">
            <summary>
            Begin a sync session.
            </summary>
        </member>
        <member name="M:Fonlow.SyncML.SyncMLFacade.SyncCompletionCallback(System.IAsyncResult)">
            <summary>
            Invoked by SyncAsync.
            </summary>
            <param name="asyncResult"></param>
        </member>
        <member name="M:Fonlow.SyncML.SyncMLFacade.InitProgressBar(System.Int32,System.Int32,System.Int32)">
            <summary>
            Fire event of InitProgressBarEvent.
            </summary>
            <param name="minValue"></param>
            <param name="maxValue"></param>
            <param name="step"></param>
        </member>
        <member name="M:Fonlow.SyncML.SyncMLFacade.InitProgressBarReceiving(System.Int32,System.Int32,System.Int32)">
            <summary>
            Fire event of InitProgressBarReceiving.
            </summary>
            <param name="minValue"></param>
            <param name="maxValue"></param>
            <param name="step"></param>
        </member>
        <member name="M:Fonlow.SyncML.SyncMLFacade.DisplayStageMessage(System.String)">
            <summary>
            Fire event of StageMessageEvent.
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:Fonlow.SyncML.SyncMLFacade.SyncComplete">
            <summary>
            After sync is completed, tell the world to save lastAnchor.
            </summary>
        </member>
        <member name="M:Fonlow.SyncML.SyncMLFacade.StopSync">
            <summary>
            Signal Facade to stop gracefully
            </summary>
        </member>
        <member name="P:Fonlow.SyncML.SyncMLFacade.Proxy">
            <summary>
            Proxy for the web connection, external.
            </summary>
        </member>
        <member name="P:Fonlow.SyncML.SyncMLFacade.BasicUriText">
            <summary>
            Basic URI connection to a sync server. Defined in configuration.
            </summary>
        </member>
        <member name="P:Fonlow.SyncML.SyncMLFacade.LastAnchorTime">
            <summary>
            Last anchor.
            </summary>
        </member>
        <member name="P:Fonlow.SyncML.SyncMLFacade.LastAnchor">
            <summary>
            The Last sync anchor describes the last event (e.g., time) when the database was synchronized from the point of
            sending device
            </summary>
        </member>
        <member name="P:Fonlow.SyncML.SyncMLFacade.NextAnchor">
            <summary>
            Next sync anchor describes the current event of sync from the point of sending device.
            </summary>
        </member>
        <member name="P:Fonlow.SyncML.SyncMLFacade.LocalDataSource">
            <summary>
            External address book platform provider
            </summary>
        </member>
        <member name="P:Fonlow.SyncML.SyncMLFacade.ContactDataSourceAtServer">
            <summary>
            card (vCard), or scard (sifc) at the SymcML server, generally defined in configuration,
            by the end user after acquiring such info from the service web page.
            </summary>
        </member>
        <member name="E:Fonlow.SyncML.SyncMLFacade.StartOperationEvent">
            <summary>
            Fire when a major operation start, with message telling the world. The client codes will start hourglass cursor.
            </summary>
        </member>
        <member name="E:Fonlow.SyncML.SyncMLFacade.EndOperationEvent">
            <summary>
            Fire when a major operation end normally or abnormally, with message telling the world. The client codes will show default cursor.
            </summary>
        </member>
        <member name="E:Fonlow.SyncML.SyncMLFacade.OperationStatusEvent">
            <summary>
            Fire to show operation message to user.
            </summary>
        </member>
        <member name="E:Fonlow.SyncML.SyncMLFacade.LastAnchorChangedEvent">
            <summary>
            Fire when last anchor gets updated
            </summary>
        </member>
        <member name="P:Fonlow.SyncML.SyncMLFacade.StatusMessages">
            <summary>
            Provide messages of different status codes.
            The object of the property should generally be assigned by client codes.
            If the client codes do not assign one, this class will create one, and the client codes
            still nedd to initialize it for loading a file with the mapping between codes and messages.
            </summary>
        </member>
        <member name="P:Fonlow.SyncML.SyncMLFacade.User">
            <summary>
            User name of the sync account
            </summary>
        </member>
        <member name="P:Fonlow.SyncML.SyncMLFacade.Password">
            <summary>
            Password of the sync account
            </summary>
        </member>
        <member name="P:Fonlow.SyncML.SyncMLFacade.DeviceAddress">
            <summary>
            Devices, which are, for example, connected temporarily, MAY prefer to identify themselves with an
            own identification mechanism.
            Refer to:http://www.syncml.org/docs/syncml_represent_v11_20020215.pdf 4.6 Identifiers page 13
            Refer to:http://en.wikipedia.org/wiki/Uniform_Resource_Name
            </summary>
        </member>
        <member name="P:Fonlow.SyncML.SyncMLFacade.DatabaseAddress">
            <summary>
            The database addressing within the SyncML operations is done by using the URI scheme defined in
            the SyncML Representation protocol. Absolute or relative URI's can be used for the server and
            client databases.
            </summary>
        </member>
        <member name="P:Fonlow.SyncML.SyncMLFacade.VendorName">
            <summary>
            Manufacturer of sync client
            </summary>
        </member>
        <member name="P:Fonlow.SyncML.SyncMLFacade.ModelName">
            <summary>
            Model. In workstation, it is the application name of local data source.
            </summary>
        </member>
        <member name="P:Fonlow.SyncML.SyncMLFacade.ModelVersion">
            <summary>
            Software version.
            </summary>
        </member>
        <member name="P:Fonlow.SyncML.SyncMLFacade.SyncType">
            <summary>
            Sync type. Default TwoWay.
            </summary>
        </member>
        <member name="P:Fonlow.SyncML.SyncMLFacade.UserPasswordBase64Encoded">
            <summary>
            Base64 encoded user password
            </summary>
        </member>
        <member name="P:Fonlow.SyncML.SyncMLFacade.CurrentMsgID">
            <summary>
            Increasing the ID must be before ProcessResponse of a syncStep, which might result in new message.
            </summary>
        </member>
        <member name="P:Fonlow.SyncML.SyncMLFacade.Connections">
            <summary>
            This is a factory that create a SyncMLConnection for each web request. 
            By default, HttpWebRequest uses the same persisten http connection.
            The startup URI and follow-up URI are different with each connection.
            </summary>
        </member>
        <member name="P:Fonlow.SyncML.SyncMLFacade.SoFarOK">
            <summary>
            Each sync steps message sent should report when sending message is so far OK.
            </summary>
        </member>
        <member name="P:Fonlow.SyncML.SyncMLFacade.Md5NextNonceFromServer">
            <summary>
            Decoded next nonce sent from the server.
            </summary>
        </member>
        <member name="P:Fonlow.SyncML.SyncMLFacade.LocalDevinf">
            <summary>
            Device info.
            </summary>
        </member>
        <member name="E:Fonlow.SyncML.SyncMLFacade.ServerDeviceInfoEvent">
            <summary>
            Fired after receiving device info of the server
            </summary>
        </member>
        <member name="E:Fonlow.SyncML.SyncMLFacade.InitProgressBarEvent">
            <summary>
            Initialize a progress bar of GUI to show progress of sending
            </summary>
        </member>
        <member name="E:Fonlow.SyncML.SyncMLFacade.InitProgressBarReceivingEvent">
            <summary>
            Fired when starting to receive sync content from the server, and initialize a progress bar of GUI to show progress of receiving.
            </summary>
        </member>
        <member name="E:Fonlow.SyncML.SyncMLFacade.IncrementProgressBarReceivingEvent">
            <summary>
            Fired during receiving sync content. The number of sync commands will be passed to the progress bar.
            </summary>
        </member>
        <member name="E:Fonlow.SyncML.SyncMLFacade.IncrementProgressBarEvent">
            <summary>
            Fired during sending sync content. The number of sync commands in each message will be passed to the progress bar.
            </summary>
        </member>
        <member name="E:Fonlow.SyncML.SyncMLFacade.StageMessageEvent">
            <summary>
            Tell the world to display a stage message along with the progress bar. The GUI generally will display the message in a label.
            </summary>
        </member>
        <member name="E:Fonlow.SyncML.SyncMLFacade.GracefulStopEvent">
            <summary>
            Fired when gracefulStop is marked and the codes just return gracefully.
            </summary>
        </member>
        <member name="P:Fonlow.SyncML.SyncMLFacade.CommandsToSend">
            <summary>
            Shared buffer by multiple SyncML messages to be sent to the server.
            </summary>
        </member>
        <member name="T:Fonlow.SyncML.CommandResponseRegister">
            <summary>
            Register which commands have been issued in a syncML message, 
            and the status codes returned from server.
            </summary>
        </member>
        <member name="M:Fonlow.SyncML.CommandResponseRegister.Add(Fonlow.SyncML.Elements.SyncMLCommand)">
            <summary>
            Add a command to the register.
            </summary>
            <param name="command"></param>
        </member>
        <member name="M:Fonlow.SyncML.CommandResponseRegister.RegisterStatus(System.String,System.String)">
            <summary>
            Marked a command registered with a status code from server.
            </summary>
            <param name="cmdRef">Index to locate the command to register.</param>
            <param name="statusCode">Status code.</param>
            <returns>Command if located.</returns>
        </member>
        <member name="M:Fonlow.SyncML.CommandResponseRegister.IsAllCommandsReturnedWithStatus">
            <summary>
            
            </summary>
            <returns>True if all commands have status.</returns>
        </member>
        <member name="P:Fonlow.SyncML.CommandResponseRegister.CommandsWithoutStatus">
            <summary>
            Generally client codes will display commands without status after checking IsAllCommandsReturnedWithStatus().
            </summary>
        </member>
        <member name="P:Fonlow.SyncML.CommandResponseRegister.CommandsXmlWithoutStatus">
            <summary>
            Return XML of commands without status, separated by new line.
            </summary>
        </member>
        <member name="T:Fonlow.SyncML.CommandResponsePair">
            <summary>
            Record what command has been issued in a SyncML message, and the statusCode returned from server.
            </summary>
        </member>
        <member name="M:Fonlow.SyncML.CommandResponsePair.Create(Fonlow.SyncML.Elements.SyncMLCommand)">
            <summary>
            Create a pair.
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="P:Fonlow.SyncML.CommandResponsePair.CmdRef">
            <summary>
            Record the CmdID of command sent to server. CmdRef will be the key to look up.
            </summary>
        </member>
        <member name="P:Fonlow.SyncML.CommandResponsePair.StatusCode">
            <summary>
            Status code returned from the server
            </summary>
        </member>
        <member name="P:Fonlow.SyncML.CommandResponsePair.Command">
            <summary>
            Point to the respective command in syncml
            </summary>
        </member>
        <member name="T:Fonlow.SyncML.LogOnMessage">
            <summary>
            Process basic lonon message with authentication and sync request
            </summary>
        </member>
        <member name="M:Fonlow.SyncML.LogOnMessage.AddGetDeviceInfo(Fonlow.SyncML.Elements.SyncMLSyncML)">
            <summary>
            Add Get command to a syncml message
            </summary>
            <param name="syncml"></param>
            <returns>The Get command.</returns>
        </member>
        <member name="M:Fonlow.SyncML.LogOnMessage.AddPutDeviceInfo(Fonlow.SyncML.Elements.SyncMLSyncML)">
            <summary>
            Add a Put command to a syncml message
            </summary>
            <param name="syncml"></param>
        </member>
        <member name="P:Fonlow.SyncML.LogOnMessage.LoggedOn">
            <summary>
            Mark whether the server had accept the credential from the client.
            </summary>
        </member>
        <member name="T:Fonlow.SyncML.SendingEmptySyncMessage">
            <summary>
            This is used in one-way sync operations.
            </summary>
        </member>
        <member name="M:Fonlow.SyncML.SendingEmptySyncMessage.LoadSyncContent(Fonlow.SyncML.Elements.SyncMLSyncML)">
            <summary>
            Load sync content from the sync command buffer in Fcade.CommandsToSend.
            </summary>
            <param name="syncML"></param>
        </member>
        <member name="T:Fonlow.SyncML.SendingSyncMessage">
            <summary>
            Process quick sync message.
            </summary>
        </member>
        <member name="M:Fonlow.SyncML.SendingSyncMessage.#ctor(Fonlow.SyncML.SyncMLFacade,System.Int32)">
            <summary>
            The sync command will contain NumberOfChanges. This is generally used for sending the first message with Sync command.
            </summary>
            <param name="facade"></param>
            <param name="numberOfChanges"></param>
        </member>
        <member name="M:Fonlow.SyncML.SendingSyncMessage.#ctor(Fonlow.SyncML.SyncMLFacade)">
            <summary>
            This is used for sending the second and next messages with Sync command.
            </summary>
            <param name="facade"></param>
        </member>
        <member name="M:Fonlow.SyncML.SendingSyncMessage.HandleServerStatus(Fonlow.SyncML.Elements.SyncMLStatus)">
            <summary>
            Called by ProcessResponseForXXX in order to respond to Status returned by server
            </summary>
            <param name="status">SyncMLStatus object which is part of syncml.</param>
        </member>
        <member name="M:Fonlow.SyncML.SendingSyncMessage.LoadSyncContent(Fonlow.SyncML.Elements.SyncMLSyncML)">
            <summary>
            Load sync content from the sync command buffer in Fcade.CommandsToSend.
            </summary>
            <param name="syncML"></param>
        </member>
        <member name="M:Fonlow.SyncML.SendingSyncMessage.CreateSyncContentMessage">
            <summary>
            Create Sync request XML from the command buffer extacting a number of commands. 
            The message will also include responses to previous server responses.
            </summary>
            <returns></returns>
        </member>
    </members>
</doc>
